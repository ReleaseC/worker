/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ws.siiva.device.DeviceStatus', null, global);
goog.exportSymbol('proto.ws.siiva.device.GetDeviceStatusReply', null, global);
goog.exportSymbol('proto.ws.siiva.device.GetDeviceStatusRequest', null, global);
goog.exportSymbol('proto.ws.siiva.device.NotifyDeviceStatusReply', null, global);
goog.exportSymbol('proto.ws.siiva.device.NotifyDeviceStatusRequest', null, global);
goog.exportSymbol('proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister', null, global);
goog.exportSymbol('proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister', null, global);
goog.exportSymbol('proto.ws.siiva.device.UpdateDeviceStatusReply', null, global);
goog.exportSymbol('proto.ws.siiva.device.UpdateDeviceStatusReply.Status', null, global);
goog.exportSymbol('proto.ws.siiva.device.UpdateDeviceStatusRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ws.siiva.device.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.DeviceStatus.displayName = 'proto.ws.siiva.device.DeviceStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activityId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    power: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ischarging: jspb.Message.getFieldWithDefault(msg, 6, false),
    temperature: jspb.Message.getFieldWithDefault(msg, 7, 0),
    freeDisk: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 9, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 99, 0),
    jsonSettings: jspb.Message.getFieldWithDefault(msg, 100, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.DeviceStatus}
 */
proto.ws.siiva.device.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.DeviceStatus;
  return proto.ws.siiva.device.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.DeviceStatus}
 */
proto.ws.siiva.device.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscharging(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreeDisk(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    case 99:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIscharging();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getFreeDisk();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      99,
      f
    );
  }
  f = message.getJsonSettings();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ws.siiva.device.DeviceStatus.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string activity_id = 2;
 * @return {string}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ws.siiva.device.DeviceStatus.prototype.setActivityId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string app_name = 3;
 * @return {string}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ws.siiva.device.DeviceStatus.prototype.setAppName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string app_version = 4;
 * @return {string}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ws.siiva.device.DeviceStatus.prototype.setAppVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 power = 5;
 * @return {number}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ws.siiva.device.DeviceStatus.prototype.setPower = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool isCharging = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getIscharging = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.ws.siiva.device.DeviceStatus.prototype.setIscharging = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 temperature = 7;
 * @return {number}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ws.siiva.device.DeviceStatus.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 free_disk = 8;
 * @return {number}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getFreeDisk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ws.siiva.device.DeviceStatus.prototype.setFreeDisk = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 ttl = 9;
 * @return {number}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ws.siiva.device.DeviceStatus.prototype.setTtl = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int64 timestamp = 99;
 * @return {number}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 99, 0));
};


/** @param {number} value */
proto.ws.siiva.device.DeviceStatus.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 99, value);
};


/**
 * optional string json_settings = 100;
 * @return {string}
 */
proto.ws.siiva.device.DeviceStatus.prototype.getJsonSettings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/** @param {string} value */
proto.ws.siiva.device.DeviceStatus.prototype.setJsonSettings = function(value) {
  jspb.Message.setField(this, 100, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ws.siiva.device.UpdateDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.UpdateDeviceStatusRequest.displayName = 'proto.ws.siiva.device.UpdateDeviceStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.UpdateDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.ws.siiva.device.DeviceStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.UpdateDeviceStatusRequest}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.UpdateDeviceStatusRequest;
  return proto.ws.siiva.device.UpdateDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.UpdateDeviceStatusRequest}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ws.siiva.device.DeviceStatus;
      reader.readMessage(value,proto.ws.siiva.device.DeviceStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.UpdateDeviceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ws.siiva.device.DeviceStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceStatus status = 1;
 * @return {?proto.ws.siiva.device.DeviceStatus}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.getStatus = function() {
  return /** @type{?proto.ws.siiva.device.DeviceStatus} */ (
    jspb.Message.getWrapperField(this, proto.ws.siiva.device.DeviceStatus, 1));
};


/** @param {?proto.ws.siiva.device.DeviceStatus|undefined} value */
proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ws.siiva.device.UpdateDeviceStatusRequest.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.UpdateDeviceStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ws.siiva.device.UpdateDeviceStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.UpdateDeviceStatusReply.displayName = 'proto.ws.siiva.device.UpdateDeviceStatusReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.UpdateDeviceStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.UpdateDeviceStatusReply}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.UpdateDeviceStatusReply;
  return proto.ws.siiva.device.UpdateDeviceStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.UpdateDeviceStatusReply}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ws.siiva.device.UpdateDeviceStatusReply.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.UpdateDeviceStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.UpdateDeviceStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.Status = {
  STATUS_SUCCESS: 0,
  STATUS_UNKNOWN_ERROR: 999
};

/**
 * optional Status status = 1;
 * @return {!proto.ws.siiva.device.UpdateDeviceStatusReply.Status}
 */
proto.ws.siiva.device.UpdateDeviceStatusReply.prototype.getStatus = function() {
  return /** @type {!proto.ws.siiva.device.UpdateDeviceStatusReply.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ws.siiva.device.UpdateDeviceStatusReply.Status} value */
proto.ws.siiva.device.UpdateDeviceStatusReply.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.GetDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ws.siiva.device.GetDeviceStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.ws.siiva.device.GetDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.GetDeviceStatusRequest.displayName = 'proto.ws.siiva.device.GetDeviceStatusRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ws.siiva.device.GetDeviceStatusRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.GetDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.GetDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.GetDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceIdsList: jspb.Message.getRepeatedField(msg, 1),
    activityIdsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.GetDeviceStatusRequest}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.GetDeviceStatusRequest;
  return proto.ws.siiva.device.GetDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.GetDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.GetDeviceStatusRequest}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDeviceIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addActivityIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.GetDeviceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.GetDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.GetDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getActivityIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string device_ids = 1;
 * @return {!Array.<string>}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.getDeviceIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.setDeviceIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.addDeviceIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.ws.siiva.device.GetDeviceStatusRequest.prototype.clearDeviceIdsList = function() {
  this.setDeviceIdsList([]);
};


/**
 * repeated string activity_ids = 2;
 * @return {!Array.<string>}
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.getActivityIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.setActivityIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ws.siiva.device.GetDeviceStatusRequest.prototype.addActivityIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.ws.siiva.device.GetDeviceStatusRequest.prototype.clearActivityIdsList = function() {
  this.setActivityIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.GetDeviceStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ws.siiva.device.GetDeviceStatusReply.repeatedFields_, null);
};
goog.inherits(proto.ws.siiva.device.GetDeviceStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.GetDeviceStatusReply.displayName = 'proto.ws.siiva.device.GetDeviceStatusReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ws.siiva.device.GetDeviceStatusReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.GetDeviceStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.GetDeviceStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.GetDeviceStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.GetDeviceStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    proto.ws.siiva.device.DeviceStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.GetDeviceStatusReply}
 */
proto.ws.siiva.device.GetDeviceStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.GetDeviceStatusReply;
  return proto.ws.siiva.device.GetDeviceStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.GetDeviceStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.GetDeviceStatusReply}
 */
proto.ws.siiva.device.GetDeviceStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ws.siiva.device.DeviceStatus;
      reader.readMessage(value,proto.ws.siiva.device.DeviceStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.GetDeviceStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.GetDeviceStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.GetDeviceStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.GetDeviceStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ws.siiva.device.DeviceStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceStatus statuses = 1;
 * @return {!Array.<!proto.ws.siiva.device.DeviceStatus>}
 */
proto.ws.siiva.device.GetDeviceStatusReply.prototype.getStatusesList = function() {
  return /** @type{!Array.<!proto.ws.siiva.device.DeviceStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ws.siiva.device.DeviceStatus, 1));
};


/** @param {!Array.<!proto.ws.siiva.device.DeviceStatus>} value */
proto.ws.siiva.device.GetDeviceStatusReply.prototype.setStatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ws.siiva.device.DeviceStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ws.siiva.device.DeviceStatus}
 */
proto.ws.siiva.device.GetDeviceStatusReply.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ws.siiva.device.DeviceStatus, opt_index);
};


proto.ws.siiva.device.GetDeviceStatusReply.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ws.siiva.device.NotifyDeviceStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.ws.siiva.device.NotifyDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.NotifyDeviceStatusRequest.displayName = 'proto.ws.siiva.device.NotifyDeviceStatusRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceRegistersList: jspb.Message.toObjectList(msg.getDeviceRegistersList(),
    proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.toObject, includeInstance),
    activityRegistersList: jspb.Message.toObjectList(msg.getActivityRegistersList(),
    proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.NotifyDeviceStatusRequest;
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister;
      reader.readMessage(value,proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.deserializeBinaryFromReader);
      msg.addDeviceRegisters(value);
      break;
    case 2:
      var value = new proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister;
      reader.readMessage(value,proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.deserializeBinaryFromReader);
      msg.addActivityRegisters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.NotifyDeviceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceRegistersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.serializeBinaryToWriter
    );
  }
  f = message.getActivityRegistersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.displayName = 'proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isAttach: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister;
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAttach(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsAttach();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool is_attach = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.getIsAttach = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister.prototype.setIsAttach = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.displayName = 'proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.toObject = function(includeInstance, msg) {
  var f, obj = {
    activityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isAttach: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister;
  return proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivityId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAttach(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsAttach();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string activity_id = 1;
 * @return {string}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.getActivityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.setActivityId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool is_attach = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.getIsAttach = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister.prototype.setIsAttach = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated DeviceNotificationRegister device_registers = 1;
 * @return {!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister>}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.getDeviceRegistersList = function() {
  return /** @type{!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister, 1));
};


/** @param {!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister>} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.setDeviceRegistersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.addDeviceRegisters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ws.siiva.device.NotifyDeviceStatusRequest.DeviceNotificationRegister, opt_index);
};


proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.clearDeviceRegistersList = function() {
  this.setDeviceRegistersList([]);
};


/**
 * repeated ActivityNotificationRegister activity_registers = 2;
 * @return {!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister>}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.getActivityRegistersList = function() {
  return /** @type{!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister, 2));
};


/** @param {!Array.<!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister>} value */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.setActivityRegistersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister}
 */
proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.addActivityRegisters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ws.siiva.device.NotifyDeviceStatusRequest.ActivityNotificationRegister, opt_index);
};


proto.ws.siiva.device.NotifyDeviceStatusRequest.prototype.clearActivityRegistersList = function() {
  this.setActivityRegistersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ws.siiva.device.NotifyDeviceStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ws.siiva.device.NotifyDeviceStatusReply.repeatedFields_, null);
};
goog.inherits(proto.ws.siiva.device.NotifyDeviceStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ws.siiva.device.NotifyDeviceStatusReply.displayName = 'proto.ws.siiva.device.NotifyDeviceStatusReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ws.siiva.device.NotifyDeviceStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    proto.ws.siiva.device.DeviceStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusReply}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ws.siiva.device.NotifyDeviceStatusReply;
  return proto.ws.siiva.device.NotifyDeviceStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ws.siiva.device.NotifyDeviceStatusReply}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ws.siiva.device.DeviceStatus;
      reader.readMessage(value,proto.ws.siiva.device.DeviceStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ws.siiva.device.NotifyDeviceStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ws.siiva.device.NotifyDeviceStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ws.siiva.device.DeviceStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceStatus statuses = 1;
 * @return {!Array.<!proto.ws.siiva.device.DeviceStatus>}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.getStatusesList = function() {
  return /** @type{!Array.<!proto.ws.siiva.device.DeviceStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ws.siiva.device.DeviceStatus, 1));
};


/** @param {!Array.<!proto.ws.siiva.device.DeviceStatus>} value */
proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.setStatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ws.siiva.device.DeviceStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ws.siiva.device.DeviceStatus}
 */
proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ws.siiva.device.DeviceStatus, opt_index);
};


proto.ws.siiva.device.NotifyDeviceStatusReply.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};


goog.object.extend(exports, proto.ws.siiva.device);
